// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/mi4r/avito-shop/internal/storage/models"
	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// BuyItem provides a mock function with given fields: ctx, username, itemName
func (_m *Storage) BuyItem(ctx context.Context, username string, itemName string) error {
	ret := _m.Called(ctx, username, itemName)

	if len(ret) == 0 {
		panic("no return value specified for BuyItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, username, itemName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: ctx, username, passwordHash
func (_m *Storage) CreateUser(ctx context.Context, username string, passwordHash string) (*models.User, error) {
	ret := _m.Called(ctx, username, passwordHash)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.User, error)); ok {
		return rf(ctx, username, passwordHash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.User); ok {
		r0 = rf(ctx, username, passwordHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, username, passwordHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCoinHistory provides a mock function with given fields: ctx, userID
func (_m *Storage) GetCoinHistory(ctx context.Context, userID int) ([]models.ReceivedTransaction, []models.SentTransaction, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetCoinHistory")
	}

	var r0 []models.ReceivedTransaction
	var r1 []models.SentTransaction
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]models.ReceivedTransaction, []models.SentTransaction, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []models.ReceivedTransaction); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ReceivedTransaction)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) []models.SentTransaction); ok {
		r1 = rf(ctx, userID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]models.SentTransaction)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, int) error); ok {
		r2 = rf(ctx, userID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUserByUsername provides a mock function with given fields: ctx, username
func (_m *Storage) GetUserByUsername(ctx context.Context, username string) (*models.User, error) {
	ret := _m.Called(ctx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.User, error)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.User); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserInventory provides a mock function with given fields: ctx, userID
func (_m *Storage) GetUserInventory(ctx context.Context, userID int) ([]models.InventoryItem, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserInventory")
	}

	var r0 []models.InventoryItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]models.InventoryItem, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []models.InventoryItem); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.InventoryItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Migrate provides a mock function with given fields: dsn
func (_m *Storage) Migrate(dsn string) {
	_m.Called(dsn)
}

// SendCoins provides a mock function with given fields: ctx, senderUsername, receiverUsername, amount
func (_m *Storage) SendCoins(ctx context.Context, senderUsername string, receiverUsername string, amount int) error {
	ret := _m.Called(ctx, senderUsername, receiverUsername, amount)

	if len(ret) == 0 {
		panic("no return value specified for SendCoins")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, int) error); ok {
		r0 = rf(ctx, senderUsername, receiverUsername, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
